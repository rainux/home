[core]
	; eol = lf
	autocrlf = input
	safecrlf = warn
[github]
	user = rainux
[branch]
	autosetuprebase = always
[color]
	ui		= auto
[diff]
	renames = copies
	tool	= gvimdiff
	compactionHeuristic = true
[difftool]
	prompt = false
[user]
	name = Rainux Luo
	email = rainux@gmail.com
[merge]
	summary = true
	tool	= gvimdiff
[push]
	default = simple
[rerere]
	enabled = true
[alias]
	a		= add
	aa		= add .
	ap		= add -p
	arc		= !git archive --format=zip --prefix="$(basename $PWD)/" HEAD -o "$(basename $PWD)-`git rev-parse --short HEAD`.zip"
	au		= add -u
	amr		= am --resolved
	b		= branch
	cb		= checkout -b
	co		= checkout
	cp		= cherry-pick
	ci		= commit --gpg-sign
	cia		= commit --gpg-sign --amend
	cim		= commit --gpg-sign -m
	ch		= cherry -v
	d		= diff -b
	dw		= diff -b --word-diff=color
	dc		= diff -b --cached
	dcw		= diff -b --cached --word-diff=color
	ds		= diff -b --stat
	dt		= difftool
	dct		= difftool --cached
	l		= log -p
	lg		= log --oneline --decorate --graph
	lgg		= log --color --graph --pretty=format:'%C(yellow)%h%Creset -%C(red)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	log		= log --show-signature
	mt		= mergetool -y
	pr		= pull-request
	rb		= rebase
	rbi		= rebase -i
	rbc		= rebase --continue
	rba		= rebase --abort
	rt		= reset
	rth		= reset --hard
	s		= status
	show	= show -b
	showw	= show -b --word-diff=color
	sm		= submodule
	st		= stash
	stl		= stash list
	stp		= stash pop
	sts		= stash show -p
	stp1	= stash pop stash@{1}
	stp2	= stash pop stash@{2}
	stp3	= stash pop stash@{3}
	stp4	= stash pop stash@{4}
	stp5	= stash pop stash@{5}
	sts1	= stash show stash@{1} -p
	sts2	= stash show stash@{2} -p
	sts3	= stash show stash@{3} -p
	sts4	= stash show stash@{4} -p
	sts5	= stash show stash@{5} -p
	tagme	= !git tag "v$(git show --no-patch --date=format:%Y%m%d --pretty=format:'%cd-%h' HEAD)"
	# summary of what you're going to push
	ps		= log --pretty=oneline origin..master
	# like "git log", but include the diffs
	w		= whatchanged
	wc		= whatchanged -p
	edit-modified   = "!f() { git ls-files -m | awk '{print $NF}' | sort -u; }; gvim -p `f`"
	edit-unmerged	= "!f() { git ls-files -u | awk '{print $NF}' | sort -u; }; $EDITOR `f`"
	add-unmerged	= "!f() { git ls-files -u | awk '{print $NF}' | sort -u; }; git add `f`"
	today = !git log --since=\"12 hours ago\" --author=\"`git config --get user.name`\" --reverse --pretty=format:%s
	f		= flow feature
	frb		= flow feature rebase
	fco		= flow feature checkout
	cloner  = clone --recursive
	switch = !legit switch \"$@\"
	branches = !legit branches
	sprout = !legit sprout \"$@\"
	unpublish = !legit unpublish \"$@\"
	harvest = !legit harvest \"$@\"
	sync = !legit sync \"$@\"
	publish = !legit publish \"$@\"
	graft = !legit graft \"$@\"
[credential]
	helper = osxkeychain
[filter "media"]
	required = true
	clean = git media clean %f
	smudge = git media smudge %f
[filter "hawser"]
	clean = git hawser clean %f
	smudge = git hawser smudge %f
	required = true
[filter "lfs"]
	clean = git lfs clean %f
	smudge = git lfs smudge %f
	required = true
[tar "tar.xz"]
	command = xz -c
